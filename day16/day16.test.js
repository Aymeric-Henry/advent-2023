import { describe, expect, test } from '@jest/globals';
import { findMaxSumPower, propagateLight, solveDay16, solveDay16Part2, sumPower } from '.';

describe('Test propagation of line', () => {
  test('Test the example', () => {
    expect(propagateLight([

      [".", "|", ".", ".", ".", "\\", ".", ".", ".", "."],
      ["|", ".", "-", ".", "\\", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", "|", "-", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "|", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "\\"],
      [".", ".", ".", ".", "/", ".", "\\", "\\", ".", "."],
      [".", "-", ".", "-", "/", ".", ".", "|", ".", "."],
      [".", "|", ".", ".", ".", ".", "-", "|", ".", "\\"],
      [".", ".", "/", "/", ".", "|", ".", ".", ".", "."]

      ,])).toEqual([
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 1, 0, 0],
      ]);
  });
});


describe('Test sum power', () => {
  test('Test the example', () => {
    expect(sumPower([
      [".", "|", ".", ".", ".", "\\", ".", ".", ".", "."],
      ["|", ".", "-", ".", "\\", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", "|", "-", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "|", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "\\"],
      [".", ".", ".", ".", "/", ".", "\\", "\\", ".", "."],
      [".", "-", ".", "-", "/", ".", ".", "|", ".", "."],
      [".", "|", ".", ".", ".", ".", "-", "|", ".", "\\"],
      [".", ".", "/", "/", ".", "|", ".", ".", ".", "."]
      ,])).toEqual(46)
  });
});

describe('Solve day 14', () => {
  test('Test the example', async () => {
    expect(await solveDay16("./day16/test.txt")).toEqual(46)
  });
});

describe('Test max sum power', () => {
  test('Test the example', () => {
    expect(findMaxSumPower([
      [".", "|", ".", ".", ".", "\\", ".", ".", ".", "."],
      ["|", ".", "-", ".", "\\", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", "|", "-", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "|", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "\\"],
      [".", ".", ".", ".", "/", ".", "\\", "\\", ".", "."],
      [".", "-", ".", "-", "/", ".", ".", "|", ".", "."],
      [".", "|", ".", ".", ".", ".", "-", "|", ".", "\\"],
      [".", ".", "/", "/", ".", "|", ".", ".", ".", "."]
      ,])).toEqual(51)
  });
});


describe('Solve day 14 part 2', () => {
  test('Test the example', async () => {
    expect(await solveDay16Part2("./day16/test.txt")).toEqual(51)
  });
});

